{"version":3,"sources":["views/MainView/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainView","useState","data","setData","DEFAULT_POSITION","lat","lon","position","setPosition","useEffect","navigator","geolocation","getCurrentPosition","geoposition","coords","latitude","longitude","fetch","method","headers","body","JSON","stringify","then","response","json","iconMap","Map","map","level","L","divIcon","className","iconSize","getLevelClass","value","getUrl","sensor","source","getLatLng","lng","getAveragePollution","reduce","acc","v","length","center","zoom","id","TileLayer","url","attribution","accessToken","Circle","radius","s","idx","Marker","key","icon","get","Popup","href","target","rel","cn","toPrecision","App","basename","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c56e79d4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Map as LMap, Marker, Popup, TileLayer, Circle } from \"react-leaflet\";\nimport \"./MainView.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport cn from \"classnames\";\n\nexport type Source = \"PWR\" | \"GIOS\" | \"AIRLY\" | \"LOOKO2\";\nexport type Position = {\n  lat: number;\n  lon: number;\n};\n\nexport type Level = \"INACTIVE\" | \"OK\" | \"1\" | \"2\" | \"3\";\n\nexport type Sensor = {\n  lat: number;\n  lon: number;\n  value: number | null;\n  source: Source;\n};\n\nexport function MainView() {\n  const [data, setData] = useState<Array<Sensor>>([]);\n  const DEFAULT_POSITION = { lat: 51.107, lon: 17.0385 };\n  const [position, setPosition] = useState<Position | null>(null);\n\n  useEffect(() => {\n    if (position) return;\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        geoposition => {\n          setPosition({\n            lat: geoposition.coords.latitude,\n            lon: geoposition.coords.longitude\n          });\n        },\n        () => {\n          setPosition(DEFAULT_POSITION);\n        }\n      );\n    } else {\n      setPosition(DEFAULT_POSITION);\n    }\n  }, [position, DEFAULT_POSITION]);\n\n  const RADIUS = 5000;\n\n  useEffect(() => {\n    if (!position) return;\n    fetch(\"https://powietrze.herokuapp.com/api/values\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ position })\n    })\n      .then(response => response.json())\n      .then(response => setData(response));\n  }, [position]);\n\n  const iconMap = new Map<string, L.DivIcon>(\n    [\"inactive\", \"ok\", \"level-1\", \"level-2\", \"level-3\", \"level-4\"].map(\n      level => [\n        level,\n        L.divIcon({\n          className: `div-icon ${level}`,\n          iconSize: [20, 20]\n        })\n      ]\n    )\n  );\n\n  function getLevelClass(value: number | null) {\n    if (value === null) return \"inactive\";\n    if (value < 10) return \"ok\";\n    if (value < 15) return \"level-1\";\n    if (value < 25) return \"level-2\";\n    if (value < 35) return \"level-3\";\n    return \"level-4\";\n  }\n\n  function getIcon(sensor: Sensor) {\n    return iconMap.get(getLevelClass(sensor.value));\n  }\n\n  function getUrl(sensor: Sensor) {\n    switch (sensor.source) {\n      case \"AIRLY\":\n        return \"https://airly.eu/pl/\";\n      case \"GIOS\":\n        return \"https://powietrze.gios.gov.pl/pjp/content/api\";\n      case \"PWR\":\n        return \"http://powietrze.pwr.edu.pl\";\n      case \"LOOKO2\":\n        return \"https://looko2.com\";\n    }\n  }\n\n  function getLatLng(position: Position): L.LatLngLiteral {\n    return { lat: position.lat, lng: position.lon };\n  }\n\n  function getAveragePollution(data: Array<Sensor>): number {\n    return data.reduce((acc, v) => acc + (v.value || 0), 0) / data.length;\n  }\n\n  return (\n    <>\n      <div className=\"map-container\">\n        <LMap\n          center={getLatLng(position || DEFAULT_POSITION)}\n          zoom={10}\n          id=\"mapid\"\n        >\n          <TileLayer\n            url=\"https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}\"\n            attribution='&copy; <a href=\"https://www.mapbox.com/about/maps/\">Mapbox</a> \n                          Â© <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> \n                          <strong><a href=\"https://www.mapbox.com/map-feedback/\" target=\"_blank\" rel=\"noreferer noopener\">\n                          Improve this map</a></strong>'\n            id=\"mapbox.light\"\n            accessToken=\"pk.eyJ1IjoibWthcm9sIiwiYSI6ImNqazl4ODMxMDJ3OTEzd2xlbnN6OHRlMTgifQ.I_mm4Sc8fkKJaFpQc8BWjg\"\n          >\n            XD\n          </TileLayer>\n          {position && (\n            <>\n              <Circle center={getLatLng(position)} radius={RADIUS} />\n              {data.map((s, idx) => (\n                <Marker position={getLatLng(s)} key={idx} icon={getIcon(s)}>\n                  {s.value && (\n                    <Popup>\n                      {s.value} ug/m3{\" \"}\n                      <a\n                        href={getUrl(s)}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {s.source}\n                      </a>\n                    </Popup>\n                  )}\n                </Marker>\n              ))}\n            </>\n          )}\n          {data.length > 0 ? (\n            <div\n              className={cn([\n                \"pollution-avg\",\n                getLevelClass(getAveragePollution(data))\n              ])}\n            >\n              {getAveragePollution(data).toPrecision(2)}\n            </div>\n          ) : (\n            <div className=\"pollution-avg inactive\"> - </div>\n          )}\n        </LMap>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport { MainView } from \"./views/MainView/MainView\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\">\n            <MainView />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}